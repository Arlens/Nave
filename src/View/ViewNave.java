/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author Arlenson
 */
public class ViewNave extends javax.swing.JFrame {

    /**
     * Creates new form ViewNave
     */
    public ViewNave() {
        initComponents();
        jPanelNave.add(new PanelDibujo(), BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelNave = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelNave.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelNave.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanelNave, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanelNave, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ViewNave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ViewNave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ViewNave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ViewNave.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ViewNave().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelNave;
    // End of variables declaration//GEN-END:variables

    public class PanelDibujo extends JComponent implements Runnable {

        private Polygon nEnemiga;
//        private int[] xCoord ={30,60,35,30,25,0};
//        private int[] yCoord ={20,0,5,0,5,0};
        private Polygon nPropia;
        private Point bala;
        int xE; // Contador
        int dxn = 1; // Dirección de la nave enemiga
        int dxp = 1; // Dirección de la nave propia
        int vel = 0;  // Velocidad de la nave (Por ahora no hace nada.. aumentara la velocidad por una determinada cantidad de puntos)
        int detfin = 0;
        int[] xCoord = {30, 60, 35, 30, 25, 0};
        int[] yCoord = {20, 0, 5, 0, 5, 0};
//        int yE;

//        private int[] yCoordP = {0,20,15,20,15,20};
        public PanelDibujo() {
            bala = new Point(0, 0);
            int[] xCoordP = {190, 220, 195, 190, 185, 160};
            int[] yCoordP = {350, 370, 365, 370, 365, 370};

            nPropia = new Polygon(xCoordP, yCoordP, xCoordP.length);
//            int xPoly []  =  { 150 , 250 , 325 , 375 , 450 , 275 , 100 }; 
//        int yPoly []  =  { 150 , 100 , 125 , 225 , 250 , 375 , 300 };
//            int[] xCoord = {30 + xE, 60 + xE, 35 + xE, 30 + xE, 25 + xE, 0 + xE};

            nEnemiga = new Polygon(xCoord, yCoord, xCoord.length);
//
//         nPropia =  new  Polygon( xPoly , yPoly , xPoly.length);
            new Thread(this).start();
        }

        public void paintComponent(Graphics g) {
//            nPropia = new Polygon(xCoord, yCoordP, 20);
            g.drawPolygon(nPropia);
            nPropia.translate(dxp, 0);
            g.drawPolygon(nEnemiga);
            nEnemiga.translate(8 * dxn + vel, 0);
            if (xE == 10){
            PuntaNave();
            g.drawOval(bala.x, bala.y, 1, 15);
            }
        }

        public void PuntaNave(){
            int x = xCoord[0];
            int y = yCoord[0];
            bala = new Point(x, y);
        }
        
        @Override
        public void run() {
            while (detfin == 0) {
                xE++;
                if (xE == 40) {
                    dxn = -dxn;
                    xE = 0;
                }
//                if (xE == 20) {
//                    dxp = -dxp;
//                    xE = 0;
//                }
                this.repaint();
                try {
                    Thread.sleep(100);
                } catch (Exception ex) {
                    Logger.getLogger(ViewNave.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public class MouseNaveP implements MouseMotionListener {

            @Override
            public void mouseDragged(MouseEvent e) {
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                dxp = e.getX();
                if (detfin != 0) {
                    repaint();
                }
            }
        }
    }
}
